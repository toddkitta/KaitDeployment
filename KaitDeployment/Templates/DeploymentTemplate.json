{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "DeploymentLocation": {
      "type": "string",
      "defaultValue": "West US",
      "allowedValues": [
        "East US",
        "West US",
        "West Europe",
        "East Asia",
        "South East Asia",
        "Central US"
      ]
    },

    // storage
    "HDInsightStorageName": {
      "type": "string"
    },
    "HDInsightStorageContainer": {
      "type": "string"
    },
    "HDInsightStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ]
    },
    "DataStorageName": {
      "type": "string"
    },
    "DataStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ]
    },
    "StreamAnalyticsMonitoringStorageName": {
      "type": "string"
    },
    "StreamAnalyticsMonitoringStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ]
    },

    // hdinsight
    "HDInsightName": {
      "type": "string"
    },
    "HDInsightAdminUser": {
      "type": "string"
    },
    "HDInsightAdminPassword": {
      "type": "string"
    },
    "HDInsightWorkerNodes": {
      "type": "int"
    },

    // event hubs
    "EventHubNamespace": {
      "type": "string"
    },
    "InteractionsEventHub": {
      "type": "string"
    },
    "InteractionsEventHubPartitions": {
      "type": "int"
    },
    "InteractionsConsumerGroup": {
      "type": "string"
    },
    "DemographicsEventHub": {
      "type": "string"
    },
    "DemographicsEventHubPartitions": {
      "type": "int"
    },
    "DemographicsConsumerGroup": {
      "type": "string"
    },
    "SkeletalEventHub": {
      "type": "string"
    },
    "SkeletalEventHubPartitions": {
      "type": "int"
    },
    "SkeletalConsumerGroup": {
      "type": "string"
    }

    // stream analytics
    "StreamAnalyticsJobName": { "type": "string" }
  },
  "variables": {
  },
  "resources": [

    // storage accounts
    {
      "name": "[parameters('HDInsightStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('DeploymentLocation')]",
      "apiVersion": "2015-05-01-preview",
      "dependsOn": [ ],
      "tags": {
        "displayName": "HDInsightStorage"
      },
      "properties": {
        "accountType": "[parameters('HDInsightStorageType')]"
      }
    },
    {
      "name": "[parameters('DataStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('DeploymentLocation')]",
      "apiVersion": "2015-05-01-preview",
      "dependsOn": [ ],
      "tags": {
        "displayName": "DataStorage"
      },
      "properties": {
        "accountType": "[parameters('DataStorageType')]"
      }
    },
    {
      "name": "[parameters('StreamAnalyticsMonitoringStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('DeploymentLocation')]",
      "apiVersion": "2015-05-01-preview",
      "dependsOn": [ ],
      "tags": {
        "displayName": "StreamAnalyticsMonitoringStorage"
      },
      "properties": {
        "accountType": "[parameters('StreamAnalyticsMonitoringStorageType')]"
      }
    },

    // HDInsight
    {
      "name": "[parameters('HDInsightName')]",
      "type": "Microsoft.HDInsight/clusters",
      "dependsOn": [
        "[parameters('HDInsightStorageName')]"
      ],
      "apiVersion": "2015-03-01-preview",
      "location": "[parameters('DeploymentLocation')]",
      "properties": {
        "clusterVersion": "3.2",
        "osType": "Windows",
        "clusterDefinition": {
          "kind": "Hadoop",
          "configurations": {
            "core-site": {
              "fs.defaultFS": "[concat('wasb://', concat(parameters('HDInsightStorageContainer'), concat('@', concat(parameters('HDInsightStorageName'), '.blob.core.windows.net'))))]",
              "[concat('fs.azure.account.key.', concat(parameters('HDInsightStorageName'), '.blob.core.windows.net'))]": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('HDInsightStorageName')), '2015-05-01-preview').key1]"
            },
            "gateway": {
              "restAuthCredential.isEnabled": "true",
              "restAuthCredential.username": "[parameters('HDInsightAdminUser')]",
              "restAuthCredential.password": "[parameters('HDInsightAdminPassword')]"
            }
          }
        },
        "computeProfile": {
          "roles": [
            {
              "name": "headnode",
              "targetInstanceCount": 2,
              "hardwareProfile": {
                "vmSize": "Standard_D12"
              },
              "osProfile": {
                "windowsOperatingSystemProfile": { }
              }
            },
            {
              "name": "workernode",
              "targetInstanceCount": "[parameters('HDInsightWorkerNodes')]",
              "hardwareProfile": {
                "vmSize": "Standard_D12"
              },
              "osProfile": {
                "windowsOperatingSystemProfile": { }
              }
            }
          ]
        }
      }
    },

    // event hubs
    {
      "apiVersion": "2014-09-01",
      "name": "[parameters('EventHubNamespace')]",
      "type": "Microsoft.EventHub/namespaces",
      "location": "[parameters('DeploymentLocation')]",
      "properties": {
        "region": "[parameters('DeploymentLocation')]"
      },
      "resources": [
        {
          "apiVersion": "2014-09-01",
          "name": "[parameters('InteractionsEventHub')]",
          "type": "eventHubs",
          "dependsOn": [
            "[parameters('EventHubNamespace')]"
          ],
          "properties": {
            "path": "[parameters('InteractionsEventHub')]",
            "partitionCount": "[parameters('InteractionsEventHubPartitions')]"
          },
          "resources": [
            {
              "apiVersion": "2014-09-01",
              "name": "[parameters('InteractionsConsumerGroup')]",
              "type": "consumergroups",
              "dependsOn": [
                "[parameters('InteractionsEventHub')]"
              ],
              "properties": {
                "enableCheckpoint": "false"
              }
            }
          ]
        },
        {
          "apiVersion": "2014-09-01",
          "name": "[parameters('DemographicsEventHub')]",
          "type": "eventHubs",
          "dependsOn": [
            "[parameters('EventHubNamespace')]"
          ],
          "properties": {
            "path": "[parameters('DemographicsEventHub')]",
            "partitionCount": "[parameters('DemographicsEventHubPartitions')]"
          },
          "resources": [
            {
              "apiVersion": "2014-09-01",
              "name": "[parameters('DemographicsConsumerGroup')]",
              "type": "consumergroups",
              "dependsOn": [
                "[parameters('DemographicsEventHub')]"
              ],
              "properties": {
                "enableCheckpoint": "false"
              }
            }
          ]
        },
        {
          "apiVersion": "2014-09-01",
          "name": "[parameters('SkeletalEventHub')]",
          "type": "eventHubs",
          "dependsOn": [
            "[parameters('EventHubNamespace')]"
          ],
          "properties": {
            "path": "[parameters('SkeletalEventHub')]",
            "partitionCount": "[parameters('SkeletalEventHubPartitions')]"
          },
          "resources": [
            {
              "apiVersion": "2014-09-01",
              "name": "[parameters('SkeletalConsumerGroup')]",
              "type": "consumergroups",
              "dependsOn": [
                "[parameters('SkeletalEventHub')]"
              ],
              "properties": {
                "enableCheckpoint": "false"
              }
            }
          ]
        }
      ]
    }

    // stream analytics
    {
      "name": "[parameters('StreamAnalyticsJobName')]",
      "dependsOn": [
        "[parameters('StreamAnalyticsMonitoringStorageName')]",
        "[parameters('InteractionsEventHub')]",
        "[parameters('DemographicsEventHub')]",
        "[parameters('SkeletalEventHub')]"
      ],
      "location": "[parameters('DeploymentLocation')]",
      "type": "Microsoft.StreamAnalytics/streamingjobs",
      "apiVersion": "2015-06-01",
      "properties": {
        "sku": {
          "name": "standard"
        },
        "eventsLateArrivalMaxDelayInSeconds": 5,
        "eventsOutOfOrderMaxDelayInSeconds": 0,
        "eventsOutOfOrderPolicy": "Adjust",
        "inputs": [
          {
            "name": "interactionsin",
            "properties": {
              "type": "Stream",
              "dataSource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "consumerGroupName": "[parameters('InteractionsConsumerGroup')]",
                  "eventHubName": "[parameters('InteractionsEventHub')]",
                  "serviceBusNamespace": "[parameters('EventHubNamespace')]",

                  // TODO: get policies
                  "sharedAccessPolicyName": "[parameters('')]",
                  "sharedAccessPolicyKey": "[parameters('')]"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          },
          {
            "name": "demographicsin",
            "properties": {
              "type": "Stream",
              "dataSource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "consumerGroupName": "[parameters('DemographicsConsumerGroup')]",
                  "eventHubName": "[parameters('DemographicsEventHub')]",
                  "serviceBusNamespace": "[parameters('EventHubNamespace')]",

                  // TODO: get policies
                  "sharedAccessPolicyName": "[parameters('')]",
                  "sharedAccessPolicyKey": "[parameters('')]"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          },
          {
            "name": "skeletalin",
            "properties": {
              "type": "Stream",
              "dataSource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "consumerGroupName": "[parameters('SkeletalConsumerGroup')]",
                  "eventHubName": "[parameters('SkeletalEventHub')]",
                  "serviceBusNamespace": "[parameters('EventHubNamespace')]",

                  // TODO: get policies
                  "sharedAccessPolicyName": "[parameters('')]",
                  "sharedAccessPolicyKey": "[parameters('')]"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          }
        ],
        "outputs": [
          {
            "name": "interactionsout",
            "properties": {
              "dataSource": {
                "type": "Microsoft.Storage/Blob",
                "properties": {
                  "blobPathPrefix": "interactions",
                  "container": "telemetry",
                  // TODO: what should this be?
                  "pathPattern": "",
                  "storageAccounts": [
                    {
                      "accountName": "[parameters('DataStorageName')]",
                      "accountKey": "[listKeys(parameters('DataStorageName'), '2015-05-01-preview' ).key1]"
                    }
                  ]
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8",
                  "format": "LineSeparated"
                }
              }
            }
          },
          {
            "name": "demographicsout",
            "properties": {
              "dataSource": {
                "type": "Microsoft.Storage/Blob",
                "properties": {
                  "blobPathPrefix": "demographics",
                  "container": "telemetry",
                  // TODO: what should this be?
                  "pathPattern": "",
                  "storageAccounts": [
                    {
                      "accountName": "[parameters('DataStorageName')]",
                      "accountKey": "[listKeys(parameters('DataStorageName'), '2015-05-01-preview' ).key1]"
                    }
                  ]
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8",
                  "format": "LineSeparated"
                }
              }
            }
          },
          {
            "name": "skeletalout",
            "properties": {
              "dataSource": {
                "type": "Microsoft.Storage/Blob",
                "properties": {
                  "blobPathPrefix": "skeletal",
                  "container": "telemetry",
                  // TODO: what should this be?
                  "pathPattern": "",
                  "storageAccounts": [
                    {
                      "accountName": "[parameters('DataStorageName')]",
                      "accountKey": "[listKeys(parameters('DataStorageName'), '2015-05-01-preview' ).key1]"
                    }
                  ]
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8",
                  "format": "LineSeparated"
                }
              }
            }
          },
          {
            "name": "dwellnotificationsout",
            "properties": {
              "dataSource": {
                "type": "Microsoft.Storage/Blob",
                "properties": {
                  "blobPathPrefix": "dwellnotifications",
                  "container": "telemetry",
                  // TODO: what should this be?
                  "pathPattern": "",
                  "storageAccounts": [
                    {
                      "accountName": "[parameters('DataStorageName')]",
                      "accountKey": "[listKeys(parameters('DataStorageName'), '2015-05-01-preview' ).key1]"
                    }
                  ]
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8",
                  "format": "LineSeparated"
                }
              }
            }
          },
          {
            "name": "dwellnotificationsouteh",
            "properties": {
              "dataSource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "serviceBusNamespace": "[parameters('EventHubNamespace')]",

                  // TODO: add this event hub
                  "eventHubName": "interactionsnotifications",

                  // TODO: get policies
                  "sharedAccessPolicyName": "",
                  "sharedAccessPolicyKey": ""
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8",
                  "format": "LineSeparated"
                }
              }
            }
          }
        ],
        "transformation": {
          "name": "ProcessTelemetryData",
          "properties": {
            "streamingUnits": 3,
            "query": "SELECT * INTO [skeletalout] FROM [skeletalin];
            SELECT *
            INTO [ interactionsout ]
            FROM [ interactionsin ]
            TIMESTAMP BY
            [ TimeStamp ]
            ; SELECT
            * INTO
            [ demographicsout ]
            FROM [ demographicsin ]
            ; SELECT
            DateAdd(minute,
            -2,
            System.TimeStamp) AS
            WindowStart,
            System.TimeStamp AS
            WindowEnd,
            TrackingID,
            COUNT(*) INTO
            [ dwellnotificationsout ]
            FROM [ interactionsin ]
            TIMESTAMP BY
            [ TimeStamp ]
            WHERE InteractionZone
            = 'ActiveEngage'
            GROUP BY
            TrackingID,
            TumblingWindow(minute,
            2) HAVING
            COUNT(*) >
            3; SELECT
            DateAdd(minute,
            -2,
            System.TimeStamp) AS
            WindowStart,
            System.TimeStamp AS
            WindowEnd,
            TrackingID,
            COUNT(*) INTO
            [ dwellnotificationsouteh ]
            FROM [ interactionsin ]
            TIMESTAMP BY
            [ TimeStamp ]
            WHERE InteractionZone
            = 'ActiveEngage'
            GROUP BY
            TrackingID,
            TumblingWindow(minute,
            2) HAVING
            COUNT(*) >
            3;"
          }
        }
      }
    }

  ],
  "outputs": {
  }
}
